package awsroute53

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk"
	"github.com/aws/aws-cdk-go/awscdk/awsec2"
	"github.com/aws/constructs-go/constructs/v3"
)

// Create a Route53 private hosted zone for use in one or more VPCs.
//
// Note that `enableDnsHostnames` and `enableDnsSupport` must have been enabled
// for the VPC you're configuring for private hosted zones.
//
// Example:
//   var vpc vpc
//
//
//   zone := route53.NewPrivateHostedZone(this, jsii.String("HostedZone"), &PrivateHostedZoneProps{
//   	ZoneName: jsii.String("fully.qualified.domain.com"),
//   	Vpc: Vpc,
//   })
//
// Experimental.
type PrivateHostedZone interface {
	HostedZone
	IPrivateHostedZone
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// ARN of this hosted zone, such as arn:${Partition}:route53:::hostedzone/${Id}.
	// Experimental.
	HostedZoneArn() *string
	// ID of this hosted zone, such as "Z23ABC4XYZL05B".
	// Experimental.
	HostedZoneId() *string
	// Returns the set of name servers for the specific hosted zone. For example: ns1.example.com.
	//
	// This attribute will be undefined for private hosted zones or hosted zones imported from another stack.
	// Experimental.
	HostedZoneNameServers() *[]*string
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// VPCs to which this hosted zone will be added.
	// Experimental.
	Vpcs() *[]*CfnHostedZone_VPCProperty
	// FQDN of this hosted zone.
	// Experimental.
	ZoneName() *string
	// Add another VPC to this private hosted zone.
	// Experimental.
	AddVpc(vpc awsec2.IVpc)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for PrivateHostedZone
type jsiiProxy_PrivateHostedZone struct {
	jsiiProxy_HostedZone
	jsiiProxy_IPrivateHostedZone
}

func (j *jsiiProxy_PrivateHostedZone) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) HostedZoneArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"hostedZoneArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) HostedZoneId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"hostedZoneId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) HostedZoneNameServers() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"hostedZoneNameServers",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) Vpcs() *[]*CfnHostedZone_VPCProperty {
	var returns *[]*CfnHostedZone_VPCProperty
	_jsii_.Get(
		j,
		"vpcs",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_PrivateHostedZone) ZoneName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"zoneName",
		&returns,
	)
	return returns
}


// Experimental.
func NewPrivateHostedZone(scope constructs.Construct, id *string, props *PrivateHostedZoneProps) PrivateHostedZone {
	_init_.Initialize()

	if err := validateNewPrivateHostedZoneParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_PrivateHostedZone{}

	_jsii_.Create(
		"monocdk.aws_route53.PrivateHostedZone",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewPrivateHostedZone_Override(p PrivateHostedZone, scope constructs.Construct, id *string, props *PrivateHostedZoneProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_route53.PrivateHostedZone",
		[]interface{}{scope, id, props},
		p,
	)
}

// Imports a hosted zone from another stack.
//
// Use when both hosted zone ID and hosted zone name are known.
// Experimental.
func PrivateHostedZone_FromHostedZoneAttributes(scope constructs.Construct, id *string, attrs *HostedZoneAttributes) IHostedZone {
	_init_.Initialize()

	if err := validatePrivateHostedZone_FromHostedZoneAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"fromHostedZoneAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack.
//
// Use when hosted zone ID is known. Hosted zone name becomes unavailable through this query.
// Experimental.
func PrivateHostedZone_FromHostedZoneId(scope constructs.Construct, id *string, hostedZoneId *string) IHostedZone {
	_init_.Initialize()

	if err := validatePrivateHostedZone_FromHostedZoneIdParameters(scope, id, hostedZoneId); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"fromHostedZoneId",
		[]interface{}{scope, id, hostedZoneId},
		&returns,
	)

	return returns
}

// Lookup a hosted zone in the current account/region based on query parameters.
//
// Requires environment, you must specify env for the stack.
//
// Use to easily query hosted zones.
// See: https://docs.aws.amazon.com/cdk/latest/guide/environments.html
//
// Experimental.
func PrivateHostedZone_FromLookup(scope constructs.Construct, id *string, query *HostedZoneProviderProps) IHostedZone {
	_init_.Initialize()

	if err := validatePrivateHostedZone_FromLookupParameters(scope, id, query); err != nil {
		panic(err)
	}
	var returns IHostedZone

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"fromLookup",
		[]interface{}{scope, id, query},
		&returns,
	)

	return returns
}

// Import a Route 53 private hosted zone defined either outside the CDK, or in a different CDK stack.
// Experimental.
func PrivateHostedZone_FromPrivateHostedZoneId(scope constructs.Construct, id *string, privateHostedZoneId *string) IPrivateHostedZone {
	_init_.Initialize()

	if err := validatePrivateHostedZone_FromPrivateHostedZoneIdParameters(scope, id, privateHostedZoneId); err != nil {
		panic(err)
	}
	var returns IPrivateHostedZone

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"fromPrivateHostedZoneId",
		[]interface{}{scope, id, privateHostedZoneId},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func PrivateHostedZone_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validatePrivateHostedZone_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func PrivateHostedZone_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	if err := validatePrivateHostedZone_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_route53.PrivateHostedZone",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) AddVpc(vpc awsec2.IVpc) {
	if err := p.validateAddVpcParameters(vpc); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"addVpc",
		[]interface{}{vpc},
	)
}

func (p *jsiiProxy_PrivateHostedZone) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := p.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (p *jsiiProxy_PrivateHostedZone) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := p.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) GetResourceNameAttribute(nameAttr *string) *string {
	if err := p.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		p,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) OnPrepare() {
	_jsii_.InvokeVoid(
		p,
		"onPrepare",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PrivateHostedZone) OnSynthesize(session constructs.ISynthesisSession) {
	if err := p.validateOnSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (p *jsiiProxy_PrivateHostedZone) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		p,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) Prepare() {
	_jsii_.InvokeVoid(
		p,
		"prepare",
		nil, // no parameters
	)
}

func (p *jsiiProxy_PrivateHostedZone) Synthesize(session awscdk.ISynthesisSession) {
	if err := p.validateSynthesizeParameters(session); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		p,
		"synthesize",
		[]interface{}{session},
	)
}

func (p *jsiiProxy_PrivateHostedZone) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		p,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (p *jsiiProxy_PrivateHostedZone) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		p,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}


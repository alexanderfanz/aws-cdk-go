package awsec2

import (
	_init_ "github.com/aws/aws-cdk-go/awscdk/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/aws-cdk-go/awscdk"
	"github.com/aws/aws-cdk-go/awscdk/awsec2/internal"
	"github.com/aws/constructs-go/constructs/v3"
)

// Creates an Amazon EC2 security group within a VPC.
//
// Security Groups act like a firewall with a set of rules, and are associated
// with any AWS resource that has or creates Elastic Network Interfaces (ENIs).
// A typical example of a resource that has a security group is an Instance (or
// Auto Scaling Group of instances)
//
// If you are defining new infrastructure in CDK, there is a good chance you
// won't have to interact with this class at all. Like IAM Roles, Security
// Groups need to exist to control access between AWS resources, but CDK will
// automatically generate and populate them with least-privilege permissions
// for you so you can concentrate on your business logic.
//
// All Constructs that require Security Groups will create one for you if you
// don't specify one at construction. After construction, you can selectively
// allow connections to and between constructs via--for example-- the `instance.connections`
// object. Think of it as "allowing connections to your instance", rather than
// "adding ingress rules a security group". See the [Allowing
// Connections](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-ec2-readme.html#allowing-connections)
// section in the library documentation for examples.
//
// Direct manipulation of the Security Group through `addIngressRule` and
// `addEgressRule` is possible, but mutation through the `.connections` object
// is recommended. If you peer two constructs with security groups this way,
// appropriate rules will be created in both.
//
// If you have an existing security group you want to use in your CDK application,
// you would import it like this:
//
// ```ts
// const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {
//    mutable: false
// });
// ```.
//
// Example:
//   var vpc vpc
//
//
//   template := ec2.NewLaunchTemplate(this, jsii.String("LaunchTemplate"), &launchTemplateProps{
//   	machineImage: ec2.machineImage.latestAmazonLinux(),
//   	securityGroup: ec2.NewSecurityGroup(this, jsii.String("LaunchTemplateSG"), &securityGroupProps{
//   		vpc: vpc,
//   	}),
//   })
//
// Experimental.
type SecurityGroup interface {
	awscdk.Resource
	ISecurityGroup
	// Whether the SecurityGroup has been configured to allow all outbound traffic.
	// Experimental.
	AllowAllOutbound() *bool
	// Whether the rule can be inlined into a SecurityGroup or not.
	// Experimental.
	CanInlineRule() *bool
	// The network connections associated with this resource.
	// Experimental.
	Connections() Connections
	// Experimental.
	DefaultPort() Port
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The construct tree node associated with this construct.
	// Experimental.
	Node() awscdk.ConstructNode
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The ID of the security group.
	// Experimental.
	SecurityGroupId() *string
	// An attribute that represents the security group name.
	// Deprecated: returns the security group ID, rather than the name.
	SecurityGroupName() *string
	// The VPC ID this security group is part of.
	// Experimental.
	SecurityGroupVpcId() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// A unique identifier for this connection peer.
	// Experimental.
	UniqueId() *string
	// Add an egress rule for the current security group.
	//
	// `remoteRule` controls where the Rule object is created if the peer is also a
	// securityGroup and they are in different stack. If false (default) the
	// rule object is created under the current SecurityGroup object. If true and the
	// peer is also a SecurityGroup, the rule object is created under the remote
	// SecurityGroup object.
	// Experimental.
	AddEgressRule(peer IPeer, connection Port, description *string, remoteRule *bool)
	// Add an ingress rule for the current security group.
	//
	// `remoteRule` controls where the Rule object is created if the peer is also a
	// securityGroup and they are in different stack. If false (default) the
	// rule object is created under the current SecurityGroup object. If true and the
	// peer is also a SecurityGroup, the rule object is created under the remote
	// SecurityGroup object.
	// Experimental.
	AddIngressRule(peer IPeer, connection Port, description *string, remoteRule *bool)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Determine where to parent a new ingress/egress rule.
	//
	// A SecurityGroup rule is parented under the group it's related to, UNLESS
	// we're in a cross-stack scenario with another Security Group. In that case,
	// we respect the 'remoteRule' flag and will parent under the other security
	// group.
	//
	// This is necessary to avoid cyclic dependencies between stacks, since both
	// ingress and egress rules will reference both security groups, and a naive
	// parenting will lead to the following situation:
	//
	//    ╔════════════════════╗         ╔════════════════════╗
	//    ║  ┌───────────┐     ║         ║    ┌───────────┐   ║
	//    ║  │  GroupA   │◀────╬─┐   ┌───╬───▶│  GroupB   │   ║
	//    ║  └───────────┘     ║ │   │   ║    └───────────┘   ║
	//    ║        ▲           ║ │   │   ║          ▲         ║
	//    ║        │           ║ │   │   ║          │         ║
	//    ║        │           ║ │   │   ║          │         ║
	//    ║  ┌───────────┐     ║ └───┼───╬────┌───────────┐   ║
	//    ║  │  EgressA  │─────╬─────┘   ║    │ IngressB  │   ║
	//    ║  └───────────┘     ║         ║    └───────────┘   ║
	//    ║                    ║         ║                    ║
	//    ╚════════════════════╝         ╚════════════════════╝
	//
	// By having the ability to switch the parent, we avoid the cyclic reference by
	// keeping all rules in a single stack.
	//
	// If this happens, we also have to change the construct ID, because
	// otherwise we might have two objects with the same ID if we have
	// multiple reversed security group relationships.
	//
	//    ╔═══════════════════════════════════╗
	//    ║┌───────────┐                      ║
	//    ║│  GroupB   │                      ║
	//    ║└───────────┘                      ║
	//    ║      ▲                            ║
	//    ║      │              ┌───────────┐ ║
	//    ║      ├────"from A"──│ IngressB  │ ║
	//    ║      │              └───────────┘ ║
	//    ║      │              ┌───────────┐ ║
	//    ║      ├─────"to B"───│  EgressA  │ ║
	//    ║      │              └───────────┘ ║
	//    ║      │              ┌───────────┐ ║
	//    ║      └─────"to B"───│  EgressC  │ ║  <-- oops
	//    ║                     └───────────┘ ║
	// ╚═══════════════════════════════════╝.
	// Experimental.
	DetermineRuleScope(peer IPeer, connection Port, fromTo *string, remoteRule *bool) *map[string]interface{}
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	OnPrepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	OnSynthesize(session constructs.ISynthesisSession)
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	OnValidate() *[]*string
	// Perform final modifications before synthesis.
	//
	// This method can be implemented by derived constructs in order to perform
	// final changes before synthesis. prepare() will be called after child
	// constructs have been prepared.
	//
	// This is an advanced framework feature. Only use this if you
	// understand the implications.
	// Experimental.
	Prepare()
	// Allows this construct to emit artifacts into the cloud assembly during synthesis.
	//
	// This method is usually implemented by framework-level constructs such as `Stack` and `Asset`
	// as they participate in synthesizing the cloud assembly.
	// Experimental.
	Synthesize(session awscdk.ISynthesisSession)
	// Produce the egress rule JSON for the given connection.
	// Experimental.
	ToEgressRuleConfig() interface{}
	// Produce the ingress rule JSON for the given connection.
	// Experimental.
	ToIngressRuleConfig() interface{}
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Validate the current construct.
	//
	// This method can be implemented by derived constructs in order to perform
	// validation logic. It is called on all constructs before synthesis.
	//
	// Returns: An array of validation error messages, or an empty array if the construct is valid.
	// Experimental.
	Validate() *[]*string
}

// The jsii proxy struct for SecurityGroup
type jsiiProxy_SecurityGroup struct {
	internal.Type__awscdkResource
	jsiiProxy_ISecurityGroup
}

func (j *jsiiProxy_SecurityGroup) AllowAllOutbound() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"allowAllOutbound",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) CanInlineRule() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"canInlineRule",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) Connections() Connections {
	var returns Connections
	_jsii_.Get(
		j,
		"connections",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) DefaultPort() Port {
	var returns Port
	_jsii_.Get(
		j,
		"defaultPort",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) Node() awscdk.ConstructNode {
	var returns awscdk.ConstructNode
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) SecurityGroupId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"securityGroupId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) SecurityGroupName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"securityGroupName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) SecurityGroupVpcId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"securityGroupVpcId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecurityGroup) UniqueId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"uniqueId",
		&returns,
	)
	return returns
}


// Experimental.
func NewSecurityGroup(scope constructs.Construct, id *string, props *SecurityGroupProps) SecurityGroup {
	_init_.Initialize()

	j := jsiiProxy_SecurityGroup{}

	_jsii_.Create(
		"monocdk.aws_ec2.SecurityGroup",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSecurityGroup_Override(s SecurityGroup, scope constructs.Construct, id *string, props *SecurityGroupProps) {
	_init_.Initialize()

	_jsii_.Create(
		"monocdk.aws_ec2.SecurityGroup",
		[]interface{}{scope, id, props},
		s,
	)
}

// Look up a security group by id.
// Deprecated: Use `fromLookupById()` instead.
func SecurityGroup_FromLookup(scope constructs.Construct, id *string, securityGroupId *string) ISecurityGroup {
	_init_.Initialize()

	var returns ISecurityGroup

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"fromLookup",
		[]interface{}{scope, id, securityGroupId},
		&returns,
	)

	return returns
}

// Look up a security group by id.
// Experimental.
func SecurityGroup_FromLookupById(scope constructs.Construct, id *string, securityGroupId *string) ISecurityGroup {
	_init_.Initialize()

	var returns ISecurityGroup

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"fromLookupById",
		[]interface{}{scope, id, securityGroupId},
		&returns,
	)

	return returns
}

// Look up a security group by name.
// Experimental.
func SecurityGroup_FromLookupByName(scope constructs.Construct, id *string, securityGroupName *string, vpc IVpc) ISecurityGroup {
	_init_.Initialize()

	var returns ISecurityGroup

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"fromLookupByName",
		[]interface{}{scope, id, securityGroupName, vpc},
		&returns,
	)

	return returns
}

// Import an existing security group into this app.
//
// This method will assume that the Security Group has a rule in it which allows
// all outbound traffic, and so will not add egress rules to the imported Security
// Group (only ingress rules).
//
// If your existing Security Group needs to have egress rules added, pass the
// `allowAllOutbound: false` option on import.
// Experimental.
func SecurityGroup_FromSecurityGroupId(scope constructs.Construct, id *string, securityGroupId *string, options *SecurityGroupImportOptions) ISecurityGroup {
	_init_.Initialize()

	var returns ISecurityGroup

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"fromSecurityGroupId",
		[]interface{}{scope, id, securityGroupId, options},
		&returns,
	)

	return returns
}

// Return whether the given object is a Construct.
// Experimental.
func SecurityGroup_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func SecurityGroup_IsResource(construct awscdk.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the indicated object is a security group.
// Experimental.
func SecurityGroup_IsSecurityGroup(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"monocdk.aws_ec2.SecurityGroup",
		"isSecurityGroup",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) AddEgressRule(peer IPeer, connection Port, description *string, remoteRule *bool) {
	_jsii_.InvokeVoid(
		s,
		"addEgressRule",
		[]interface{}{peer, connection, description, remoteRule},
	)
}

func (s *jsiiProxy_SecurityGroup) AddIngressRule(peer IPeer, connection Port, description *string, remoteRule *bool) {
	_jsii_.InvokeVoid(
		s,
		"addIngressRule",
		[]interface{}{peer, connection, description, remoteRule},
	)
}

func (s *jsiiProxy_SecurityGroup) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		s,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (s *jsiiProxy_SecurityGroup) DetermineRuleScope(peer IPeer, connection Port, fromTo *string, remoteRule *bool) *map[string]interface{} {
	var returns *map[string]interface{}

	_jsii_.Invoke(
		s,
		"determineRuleScope",
		[]interface{}{peer, connection, fromTo, remoteRule},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) OnPrepare() {
	_jsii_.InvokeVoid(
		s,
		"onPrepare",
		nil, // no parameters
	)
}

func (s *jsiiProxy_SecurityGroup) OnSynthesize(session constructs.ISynthesisSession) {
	_jsii_.InvokeVoid(
		s,
		"onSynthesize",
		[]interface{}{session},
	)
}

func (s *jsiiProxy_SecurityGroup) OnValidate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		s,
		"onValidate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) Prepare() {
	_jsii_.InvokeVoid(
		s,
		"prepare",
		nil, // no parameters
	)
}

func (s *jsiiProxy_SecurityGroup) Synthesize(session awscdk.ISynthesisSession) {
	_jsii_.InvokeVoid(
		s,
		"synthesize",
		[]interface{}{session},
	)
}

func (s *jsiiProxy_SecurityGroup) ToEgressRuleConfig() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"toEgressRuleConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) ToIngressRuleConfig() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"toIngressRuleConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecurityGroup) Validate() *[]*string {
	var returns *[]*string

	_jsii_.Invoke(
		s,
		"validate",
		nil, // no parameters
		&returns,
	)

	return returns
}

